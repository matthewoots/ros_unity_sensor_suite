//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Geographic
{
    [Serializable]
    public class GeoPointMsg : Message
    {
        public const string k_RosMessageName = "geographic_msgs/GeoPoint";
        public override string RosMessageName => k_RosMessageName;

        //  Geographic point, using the WGS 84 reference ellipsoid.
        //  Latitude [degrees]. Positive is north of equator; negative is south
        //  (-90 <= latitude <= +90).
        public double latitude;
        //  Longitude [degrees]. Positive is east of prime meridian; negative is
        //  west (-180 <= longitude <= +180). At the poles, latitude is -90 or
        //  +90, and longitude is irrelevant, but must be in range.
        public double longitude;
        //  Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
        public double altitude;

        public GeoPointMsg()
        {
            this.latitude = 0.0;
            this.longitude = 0.0;
            this.altitude = 0.0;
        }

        public GeoPointMsg(double latitude, double longitude, double altitude)
        {
            this.latitude = latitude;
            this.longitude = longitude;
            this.altitude = altitude;
        }

        public static GeoPointMsg Deserialize(MessageDeserializer deserializer) => new GeoPointMsg(deserializer);

        private GeoPointMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.latitude);
            deserializer.Read(out this.longitude);
            deserializer.Read(out this.altitude);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.latitude);
            serializer.Write(this.longitude);
            serializer.Write(this.altitude);
        }

        public override string ToString()
        {
            return "GeoPointMsg: " +
            "\nlatitude: " + latitude.ToString() +
            "\nlongitude: " + longitude.ToString() +
            "\naltitude: " + altitude.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
